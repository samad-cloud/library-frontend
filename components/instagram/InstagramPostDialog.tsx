'use client'

import React, { useState, useEffect } from 'react'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Instagram, Loader2, Check, AlertCircle } from 'lucide-react'
import { Badge } from "@/components/ui/badge"

interface InstagramAccount {
  page_id: string
  ig_user_id: string | null
  name: string
  username: string
  is_default: boolean
}

interface InstagramPostDialogProps {
  imageUrl?: string
  imageBase64?: string
  caption: string  // Required - generated by your generators
  modelName?: string
  trigger?: React.ReactNode
  onSuccess?: (result: any) => void
  onError?: (error: string) => void
}

export default function InstagramPostDialog({
  imageUrl,
  imageBase64,
  caption,
  modelName = 'unknown',
  trigger,
  onSuccess,
  onError
}: InstagramPostDialogProps) {
  const [isOpen, setIsOpen] = useState(false)
  const [accounts, setAccounts] = useState<InstagramAccount[]>([])
  const [selectedAccountId, setSelectedAccountId] = useState<string>('')
  const [isPosting, setIsPosting] = useState(false)
  const [postResult, setPostResult] = useState<any>(null)
  const [error, setError] = useState<string>('')
  const [isLoadingAccounts, setIsLoadingAccounts] = useState(false)

  // Load Instagram accounts
  useEffect(() => {
    if (isOpen) {
      fetchAccounts()
    }
  }, [isOpen])

  const fetchAccounts = async () => {
    setIsLoadingAccounts(true)
    try {
      const response = await fetch('/api/instagram/accounts')
      const data = await response.json()
      
      if (data.success) {
        setAccounts(data.accounts || [])
        // Select default account
        if (data.default_account) {
          setSelectedAccountId(data.default_account.page_id)
        }
      } else {
        setError('Failed to load Instagram accounts')
      }
    } catch (err) {
      console.error('Failed to fetch accounts:', err)
      setError('Failed to load Instagram accounts')
    } finally {
      setIsLoadingAccounts(false)
    }
  }

  const handlePost = async () => {
    if (!caption.trim()) {
      setError('Caption is required')
      return
    }

    if (!selectedAccountId) {
      setError('Please select an Instagram account')
      return
    }

    if (!imageUrl && !imageBase64) {
      setError('No image available to post')
      return
    }

    setIsPosting(true)
    setError('')
    setPostResult(null)

    try {
      const response = await fetch('/api/instagram/post', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          caption: caption.trim(),
          model: modelName,
          accountId: selectedAccountId,
          imageUrl,
          imageBase64
        })
      })

      const result = await response.json()

      if (result.success) {
        setPostResult(result)
        onSuccess?.(result)
        
        // Auto-close dialog after 3 seconds
        setTimeout(() => {
          setIsOpen(false)
          resetForm()
        }, 3000)
      } else {
        const errorMsg = result.error || 'Failed to post to Instagram'
        setError(errorMsg)
        onError?.(errorMsg)
      }
    } catch (err) {
      console.error('Instagram post error:', err)
      const errorMsg = 'Network error posting to Instagram'
      setError(errorMsg)
      onError?.(errorMsg)
    } finally {
      setIsPosting(false)
    }
  }

  const resetForm = () => {
    setError('')
    setPostResult(null)
    setSelectedAccountId('')
  }

  const handleOpenChange = (open: boolean) => {
    setIsOpen(open)
    if (!open) {
      resetForm()
    }
  }

  const selectedAccount = accounts.find(acc => acc.page_id === selectedAccountId)
  const availableAccounts = accounts.filter(acc => acc.ig_user_id) // Only accounts with IG user ID

  return (
    <Dialog open={isOpen} onOpenChange={handleOpenChange}>
      <DialogTrigger asChild>
        {trigger || (
          <Button 
            variant="outline" 
            size="sm"
            className="flex items-center gap-2"
          >
            <Instagram className="w-4 h-4" />
            Post to Instagram
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Instagram className="w-5 h-5 text-pink-600" />
            Post to Instagram
          </DialogTitle>
          <DialogDescription>
            Share this image on Instagram with a custom caption
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4">
          {/* Account Selection */}
          <div>
            <label className="text-sm font-medium mb-2 block">
              Instagram Account
            </label>
            {isLoadingAccounts ? (
              <div className="flex items-center gap-2 text-sm text-gray-500">
                <Loader2 className="w-4 h-4 animate-spin" />
                Loading accounts...
              </div>
            ) : availableAccounts.length > 0 ? (
              <Select value={selectedAccountId} onValueChange={setSelectedAccountId}>
                <SelectTrigger>
                  <SelectValue placeholder="Select an account" />
                </SelectTrigger>
                <SelectContent>
                  {availableAccounts.map((account) => (
                    <SelectItem key={account.page_id} value={account.page_id}>
                      <div className="flex items-center gap-2">
                        <span>{account.name}</span>
                        <Badge variant="secondary" className="text-xs">
                          @{account.username}
                        </Badge>
                        {account.is_default && (
                          <Badge variant="default" className="text-xs">
                            Default
                          </Badge>
                        )}
                      </div>
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            ) : (
              <div className="text-sm text-amber-600 bg-amber-50 p-3 rounded-lg">
                ⚠️ No Instagram accounts available with valid IG User IDs
              </div>
            )}
          </div>

          {/* Caption Preview */}
          <div>
            <label className="text-sm font-medium mb-2 block">
              Caption Preview
            </label>
            <div className="p-3 bg-gray-50 rounded-lg border max-h-32 overflow-y-auto">
              <p className="text-sm text-gray-700 whitespace-pre-wrap">
                {caption || 'No caption provided'}
              </p>
            </div>
            <div className="text-xs text-gray-500 mt-1 text-right">
              {caption.length} characters
            </div>
          </div>

          {/* Image Preview */}
          {(imageUrl || imageBase64) && (
            <div>
              <label className="text-sm font-medium mb-2 block">Preview</label>
              <div className="relative">
                <img
                  src={imageUrl || imageBase64}
                  alt="Preview"
                  className="w-full h-48 object-cover rounded-lg border"
                />
                <Badge 
                  variant="secondary" 
                  className="absolute top-2 right-2 text-xs"
                >
                  {modelName}
                </Badge>
              </div>
            </div>
          )}

          {/* Error Message */}
          {error && (
            <div className="flex items-center gap-2 text-sm text-red-600 bg-red-50 p-3 rounded-lg">
              <AlertCircle className="w-4 h-4" />
              {error}
            </div>
          )}

          {/* Success Message */}
          {postResult && (
            <div className="flex items-center gap-2 text-sm text-green-600 bg-green-50 p-3 rounded-lg">
              <Check className="w-4 h-4" />
              Successfully posted to Instagram! 
              {selectedAccount && (
                <Badge variant="outline" className="ml-2">
                  {selectedAccount.name}
                </Badge>
              )}
            </div>
          )}

          {/* Actions */}
          <div className="flex gap-2 pt-2">
            <Button
              variant="outline"
              onClick={() => setIsOpen(false)}
              disabled={isPosting}
              className="flex-1"
            >
              Cancel
            </Button>
            <Button
              onClick={handlePost}
              disabled={isPosting || !caption || !selectedAccountId || availableAccounts.length === 0}
              className="flex-1"
            >
              {isPosting ? (
                <>
                  <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                  Posting...
                </>
              ) : (
                <>
                  <Instagram className="w-4 h-4 mr-2" />
                  Post
                </>
              )}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
